name: Test & Deploy Evaluation Function to AWS Lambda

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.11.9]

    env:
      REQUEST_SCHEMA_URL: https://raw.githubusercontent.com/lambda-feedback/request-response-schemas/master/request.json
      RESPONSE_SCHEMA_URL: https://raw.githubusercontent.com/lambda-feedback/request-response-schemas/master/responsev2.json

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        id: python-setup
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Load cached Poetry installation
        id: poetry-cache
        uses: actions/cache@v4
        with:
          path: ~/.local
          key: poetry-0
  
      - name: Install and configure Poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        uses: snok/install-poetry@v1
        with:
          virtualenvs-in-project: true

      - name: Load cached venv
        id: dependencies-cache
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.python-setup.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install python dependencies
        if: steps.dependencies-cache.outputs.cache-hit != 'true'
        run: |
          poetry install  --no-interaction --no-root
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          python -m pip install gensim

      - name: Load cached NLTK data
        id: nltk-cache
        uses: actions/cache@v4
        with:
          path: /usr/share/nltk_data
          key: nltk-data-${{ hashFiles('scripts/download_nltk.sh') }}

      - name: Download NLTK data
        if: steps.nltk-cache.outputs.cache-hit != 'true'
        env:
          NLTK_DATA: /usr/share/nltk_data
        run: |
          ./scripts/download_nltk.sh

      - name: Load cached models
        id: models-cache
        uses: actions/cache@v4
        with:
          path: ./app/models
          key: models-${{ hashFiles('scripts/download_models.sh') }}

      - name: Download models
        if: steps.models-cache.outputs.cache-hit != 'true'
        env:
          MODEL_PATH: ./app/models
        run: |
          ./scripts/download_models.sh

      # TODO: add linting / black / flake8
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Test Evaluation Function
        run: |
          pytest -v app/evaluation_tests.py::TestEvaluationFunction
          pytest -v app/evaluation_tests.py::TestEvaluationComputingFunction

  deploy-staging:
    name: Deploy Staging
    needs: test
    runs-on: ubuntu-latest
    environment: production
    env:
      ECR_REPOSITORY: lambda-feedback-staging-functions-repository

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set config.json output
        id: set_config_var
        run: |
          content=`cat ./config.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=configJson::$content"

      - name: set Evaluation Function Name
        id: set_function_name
        run: |
          functionName="${{fromJson(steps.set_config_var.outputs.configJson).EvaluationFunctionName}}"
          [[ -z "$functionName" ]] && { echo "Add EvaluationFunctionName to config.json" ; exit 1; }
          echo "::set-output name=function_name::$functionName"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_ID }}
          aws-secret-access-key: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_SECRET }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.set_function_name.outputs.function_name }}
        run: |
          # Build docker image from algorithm, schema and requirements
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG app/
          # Push image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: deploy evaluation function
        id: deploy-evaluation-function
        env:
          BACKEND_API_URL: https://staging-api.lambdafeedback.com
          API_KEY: ${{ secrets.FUNCTION_ADMIN_API_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.set_function_name.outputs.function_name }}
        run: |
          curl --location --request POST "$BACKEND_API_URL/grading-function/ensure" \
          --header 'content-type: application/json' \
          --data-raw "{
              \"apiKey\": \"$API_KEY\",
              \"dockerImageUri\": \"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\",
              \"functionName\": \"$IMAGE_TAG\"
          }"

  deploy-production:
    name: Deploy Production
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: production
    env:
      ECR_REPOSITORY: lambda-feedback-production-functions-repository

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set config.json output
        id: set_config_var
        run: |
          content=`cat ./config.json`
          # the following lines are only required for multi line json
          content="${content//'%'/'%25'}"
          content="${content//$'\n'/'%0A'}"
          content="${content//$'\r'/'%0D'}"
          # end of optional handling for multi line json
          echo "::set-output name=configJson::$content"

      - name: set Evaluation Function Name
        id: set_function_name
        run: |
          functionName="${{fromJson(steps.set_config_var.outputs.configJson).EvaluationFunctionName}}"
          [[ -z "$functionName" ]] && { echo "Add EvaluationFunctionName to config.json" ; exit 1; }
          echo "::set-output name=function_name::$functionName"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_ID }}
          aws-secret-access-key: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_SECRET }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.set_function_name.outputs.function_name }}
        run: |
          # Build docker image from algorithm, schema and requirements
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG app/
          # Push image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: deploy evaluation function
        id: deploy-evaluation-function
        env:
          BACKEND_API_URL: https://prod-api.lambdafeedback.com
          API_KEY: ${{ secrets.FUNCTION_ADMIN_API_KEY }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.set_function_name.outputs.function_name }}
        run: |
          curl --location --request POST "$BACKEND_API_URL/grading-function/ensure" \
          --header 'content-type: application/json' \
          --data-raw "{
              \"apiKey\": \"$API_KEY\",
              \"dockerImageUri\": \"$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG\",
              \"functionName\": \"$IMAGE_TAG\"
          }"
