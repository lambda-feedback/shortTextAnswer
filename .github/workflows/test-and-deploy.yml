name: Test & Deploy Evaluation Function to AWS Lambda

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        python-version: [3.11.9]

    env:
      REQUEST_SCHEMA_URL: https://raw.githubusercontent.com/lambda-feedback/request-response-schemas/master/request.json
      RESPONSE_SCHEMA_URL: https://raw.githubusercontent.com/lambda-feedback/request-response-schemas/master/responsev2.json

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        id: python-setup
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      # - name: Load cached Poetry installation
      #   id: poetry-cache
      #   uses: actions/cache@v4
      #   with:
      #     path: ~/.local
      #     key: poetry-0
  
      # - name: Install and configure Poetry
      #   if: steps.poetry-cache.outputs.cache-hit != 'true'
      #   uses: snok/install-poetry@v1
      #   with:
      #     virtualenvs-in-project: true

      # - name: Load cached venv
      #   id: dependencies-cache
      #   uses: actions/cache@v4
      #   with:
      #     path: .venv
      #     key: venv-${{ runner.os }}-${{ steps.python-setup.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install python dependencies
        # if: steps.dependencies-cache.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8 pytest
          python -m pip install -r app/requirements.txt 
        # poetry install  --no-interaction --no-root

      - name: Load cached NLTK data
        id: nltk-cache
        uses: actions/cache@v4
        with:
          path: /usr/share/nltk_data
          key: nltk-data-${{ hashFiles('scripts/download_nltk.sh') }}

      - name: Download NLTK data
        if: steps.nltk-cache.outputs.cache-hit != 'true'
        env:
          NLTK_DATA: /usr/share/nltk_data
        run: |
          ./scripts/download_nltk.sh

      - name: Load cached models
        id: models-cache
        uses: actions/cache@v4
        with:
          path: ./app/models
          key: models-${{ hashFiles('scripts/download_models.sh') }}

      - name: Download models
        if: steps.models-cache.outputs.cache-hit != 'true'
        env:
          MODEL_PATH: ./app/models
        run: |
          ./scripts/download_models.sh

      # TODO: add linting / black / flake8
      # - name: Lint with flake8
      #   run: |
      #     # stop the build if there are Python syntax errors or undefined names
      #     python -m flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
      #     python -m flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # - name: Test Evaluation Function
      #   run: |
      #     pytest -v app/evaluation_tests.py::TestEvaluationFunction
      #     pytest -v app/evaluation_tests.py::TestEvaluationComputingFunction

  build:
    name: Build Docker Image
    uses: lambda-feedback/evaluation-function-workflows/.github/workflows/build.yml@main
    needs: test
    with:
      platforms: "linux/x86_64"
    permissions:
      contents: read
      id-token: write
      packages: write

  deploy:
    name: Deploy to Lambda Feedback
    uses: lambda-feedback/evaluation-function-workflows/.github/workflows/deploy.yml@main
    needs: test
    with:
      template-repository-name: "lambda-feedback/evaluation-function-boilerplate-python"
      build-platforms: "linux/x86_64"
    permissions:
      contents: read
      id-token: write
      packages: write
    secrets:
      aws-key-id: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_ID }}
      aws-secret-key: ${{ secrets.LAMBDA_CONTAINER_PIPELINE_AWS_SECRET}}
      function-admin-api-key: ${{ secrets.FUNCTION_ADMIN_API_KEY}}
